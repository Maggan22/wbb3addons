#! /bin/sh
# www-BackUp-Script by MailMan - http://wbb3addons.ump2002.net
# **********************************************************
# $Id$
# **********************************************************
# Parameters:
# deldepth=n
# e.g. deldepth=2 is using delDirs2 to remove directories before download
# **********************************************************
# START USER-SETUP *****************************************
# FTP Domain - e.g. "ftp.mydomain.net"
ftpDomain='**********FTP-SERVER**********'
# FTP Username
ftpUser='**********FTP-USERNAME**********'
# FTP Password
ftpPass='**********FTP-PASSWORD**********'
# Disable passive FTP transfer mode [0 = use passive; 1 = disable passive]
ftpDisablePassive=0
# FTP Root Directory 
ftpRoot="/httpdocs/"
# Exclude directories from download (comma-separated list) - e.g. "/tmp,/images/old"
ftpExcludeDirs=""
# Local backup directory
backupDir="/var/shares/develop/www/HP_wbb3addons"
# Owner of all files and directories in $backupDir. Username, e.g. "www-data" or blank for operators username.
backupOwner="www-data"
# Group of all files and directories in $backupDir. Usergroup, e.g. "users" or blank for operators usergroup.
backupGroup="users"
# CHMOD of all files in $backupDir
chmodFiles=664
# CHMOD of all directories in $backupDir
chmodDirs=777
# DATABASE *************************************************
# Database name
dbName='**********DB-NAME**********'
# Database user
dbUser='**********DB-USERNAME**********'
# Database password
dbPassword='**********DB-PASSWORD**********'
# Database host
dbHost='localhost'
# Database character set (latin1, utf8...)
dbCharset='utf8'
# Execute SQL from file
dbExecFile='/var/shares/www-backup.sql'
# mysqlcheck after backup - e.g. '/usr/bin/mysqlcheck -ao '$dbName
dbCheck='/usr/bin/mysqlcheck -ao '$dbName
# Import dump after backup (0 = disabled; 1 = enabled)
dumpImport=1
# Dump directory
dumpPath=$backupDir"/httpdocs/mysqldumper/work/backup"
# Keeps the last $dumpDelCounter dumps and deletes all other dumps (0 = disabled) - independently of $dumpDelDays!
dumpDelCounter=14
# Delete dumps older $dumpDelDays (0 = disabled) - independently of $dumpDelCounter!
dumpDelDays=0
# Dump file pattern matching
dumpMatch="wbb3addons_.*\.gz$"
# **********************************************************
# wBB3 cache directories (will be cleared after backup)
cacheDirs="httpdocs/wbb/cache,httpdocs/wbb/wcf/cache,httpdocs/wbb/wcf/templates/compiled,httpdocs/wbb/wcf/acp/templates/compiled"
# BE CAREFUL! *********************************************
# Remove local directories recursively before download (comma-separated, starting from $backupDir) 
# e.g.: if set backupDir="/var/www/ftp" and delDirs1="images,img", this will remove
# /var/www/ftp/images and /var/www/ftp/img before download
delDirs1=""
delDirs2="httpdocs/wbb/attachments"
delDirs3=""
delDirs4=""
# Following example deletes the whole backupDir recursively!
# delDirs5=$backupDir
# **********************************************************
# Restore files (comma-separated list, starting from $backupDir)
# this option save files (in /tmp/ftp-tmp) before download and restore it after download
# e.g.: ".htaccess,batches/my.gif"
restoreFiles="httpdocs/.htaccess"
# Logfile
logFile="/var/log/www-backup.log"
# Log Type [a=append | d=delete]
logType="d"
# Remove files from $backupDir and all $backupDir/subdirs after download (comma-separated list)
# e.g. ".listing" files generated by FTP retrievals
delFiles=""

# **********************************************************
# END USER-SETUP *******************************************
# **********************************************************

# PRIVATE VARs *********************************************
# Restore path
pRestore="/tmp/ftp-tmp"
# Date format
sDate=`date +"%d.%m.%Y %H:%M:%S"`
# Header
hSpacer="************************************************************"
# Title
tSpacer="------------------------------------------------------------"
# **********************************************************

if [ ! -d $backupDir ]; then
	echo "ERROR: no backup directory dedicated!"
	exit 0
fi

# check parameter deldepth *********************************
delDirIdx=$(echo $* | sed -e "s/.*deldepth\=\([0-9]*\).*/\1/ig")
if [ -z "$delDirIdx" ] || [ ! $delDirIdx -gt 0 ]; then
	delDirIdx=1
fi
delDirs=$(eval echo \${delDirs$delDirIdx})

rm -fr $pRestore

if [ -z "$logFile" ]; then logFile="$backupDir/ftp-backup.log"; fi
if [ "$logType" = "d" ]; then rm -f $logFile; fi

if [ ! -z "$restoreFiles" ]; then
	echo "$tSpacer" >> $logFile
	echo "Saving files to restore:" >> $logFile
	mkdir $pRestore
	oIFS=$IFS
	IFS=,
	for resFile in $restoreFiles; do
#		ltrim/rtrim
		resFile=`echo $resFile | sed 's/^ *//' | sed 's/ *$//'`
		if [ ! -z "$resFile" ] && [ -s $backupDir"/"$resFile ]; then
			rDIR=`dirname $resFile`
			if [ -d $backupDir"/"$rDIR ]; then
				echo "- "$backupDir"/"$resFile" to "$pRestore"/"$resFile >> $logFile
				mkdir --parents $pRestore"/"$rDIR
				cp -f --preserve $backupDir"/"$resFile $pRestore"/"$resFile >> $logFile
			else
				cp -f --preserve $backupDir"/"$resFile $pRestore >> $logFile
			fi
		fi
	done
	IFS=$oIFS
fi

if [ ! -z "$delDirs" ]; then
	echo "$tSpacer" >> $logFile
	echo "Removing directories:" >> $logFile
	if [ "$delDirs" = "$backupDir" ]; then
		rm -rv $backupDir >> $logFile
		mkdir $backupDir >> $logFile
	else
		oIFS=$IFS
		IFS=,
		for delDir in $delDirs; do
#			ltrim/rtrim dirname
			delDir=`echo $delDir | sed 's/^ *//' | sed 's/ *$//'`
			if [ ! -z "$delDir" ] && [ -d $backupDir"/"$delDir ]; then
				rm -rv $backupDir"/"$delDir >> $logFile
			fi
		done
		IFS=$oIFS
	fi
fi

echo "$tSpacer" >> $logFile
echo "Starting download:" >> $logFile
wgetStr='wget -r -N -l inf -nv -nH --ftp-user='"$ftpUser"' --ftp-password='"$ftpPass"
if [ $ftpDisablePassive -eq 1 ]; then wgetStr=$wgetStr' --no-passive-ftp'; fi
if [ ! -z "$ftpExcludeDirs" ]; then wgetStr=$wgetStr' -X '"$ftpExcludeDirs"; fi
if [ ! -z "$logFile" ]; then wgetStr=$wgetStr' -o '"$logFile"'-wget'; fi
wgetStr=$wgetStr' -P '"$backupDir"' ftp://'"$ftpDomain""$ftpRoot"
eval $wgetStr

tail -n 3 $logFile"-wget" >> $logFile

if [ ! -z "$delFiles" ]; then
	echo "$tSpacer" >> $logFile
	echo "Removing files:" >> $logFile
	oIFS=$IFS
	IFS=,
	for delFile in $delFiles; do
#		ltrim/rtrim filename
		delFile=`echo $delFile | sed 's/^ *//' | sed 's/ *$//'`
		if [ ! -z "$delFile" ]; then
			find $backupDir -name $delFile -type f -exec rm -fv {} >> $logFile \; 2> /dev/null
		fi
	done
	IFS=$oIFS
fi

if [ ! -z "$restoreFiles" ] && [ -d $pRestore ]; then
	echo "$tSpacer" >> $logFile
	echo "Restore files:" >> $logFile
	oIFS=$IFS
	IFS=,
	for resFile in $restoreFiles; do
#		ltrim/rtrim
		resFile=`echo $resFile | sed 's/^ *//' | sed 's/ *$//'`
		if [ ! -z "$resFile" ] && [ -s $pRestore"/"$resFile ]; then
			echo "- "$pRestore"/"$resFile" to "$backupDir"/"$resFile >> $logFile
			cp -f --preserve $pRestore"/"$resFile $backupDir"/"$resFile >> $logFile
		fi
	done
	IFS=$oIFS
fi

if [ ! -z "$dumpPath" ]; then
	if [ $dumpDelCounter -gt 0 ]; then
		echo "$tSpacer" >> $logFile
		echo "Deleting older dumps by counter..." >> $logFile
		cnt=0
		for f in $(find $dumpPath -type f -name '*' | grep "$dumpMatch" | sort -r); do
			cnt=$(expr $cnt + 1)
			if [ $cnt -gt $dumpDelCounter -a -e "$f" ]; then
				rm -v "$f" >> $logFile
			fi
		done
	fi

	if [ $dumpDelDays -gt 0 ]; then
		echo "$tSpacer" >> $logFile
		echo "Deleting older dumps by date..." >> $logFile
		curDate=$(date +%s)
		delDate=$(expr $curDate - 86400 \* $dumpDelDays)
		for f in $dumpPath/*; do
			if [ ! -z "`echo "$f" | grep "$dumpMatch"`" ]; then
				lastMod=$(stat -c %Y "$f")
				if [ $lastMod -lt $delDate ]; then
					rm -v "$f" >> $logFile
				fi
			fi
		done
	fi
fi

if [ $dumpImport -eq 1 -a ! -z "$dumpPath" ]; then
	rm -f "$dumpPath/current.dump.sql"
	echo "$tSpacer" >> $logFile
	echo "Checking dump import..." >> $logFile
	dumpStat=0
	dumpFile=""
	for f in $dumpPath/*; do
		if [ ! -z "`echo "$f" | grep "$dumpMatch"`" ]; then
			dumpCurrent=$(stat -c %Y "$f")
			if [ $dumpCurrent -gt $dumpStat ]; then
				dumpStat=$dumpCurrent
				dumpFile=`basename "$f"`
			fi
		fi
	done
	if [ -s "$dumpPath/$dumpFile" ] && ([ ! -s "$dumpPath/dump.last" ] || [ "$dumpFile" != $(cat "$dumpPath/dump.last") ]); then
		echo "$dumpFile" > "$dumpPath/dump.last"
		echo "unzip $dumpFile" >> $logFile
		gunzip -fc "$dumpPath/$dumpFile" > "$dumpPath/current.dump.sql"
		echo "import dump $dumpFile" >> $logFile
		if [ -s "$dumpPath/current.dump.sql" ]; then
			mysql --user="$dbUser" --password="$dbPassword" --database="$dbName" --default-character-set="$dbCharset" < "$dumpPath/current.dump.sql"
			rm -v "$dumpPath/current.dump.sql" >> $logFile
		fi
		if [ -s $dbExecFile ]; then
			echo "executing SQL from file..." >> $logFile
			mysql -Bfv --user="$dbUser" --password="$dbPassword" --database="$dbName" < "$dbExecFile" >> $logFile 2>&1
		fi
	else
		echo "no current db backup available" >> $logFile
	fi
fi

if [ ! -z "$dbCheck" -a ! -z "$dbName" ]; then
	echo "$tSpacer" >> $logFile
	echo "optimize database..." >> $logFile
	tmp=$dbCheck" >> $logFile"
	eval $tmp
fi

# clear wBB3 cache directories
if [ ! -z "$cacheDirs" ]; then
	echo "$tSpacer" >> $logFile
	echo "Deleting wBB3 cache directories..." >> $logFile
	cnt=0
	oIFS=$IFS
	IFS=,
	for cacheDir in $cacheDirs; do
		cacheDir=`echo $cacheDir | sed 's/^ *//' | sed 's/ *$//'`
		for f in $backupDir/$cacheDir/*; do
		        if [ ! -z "`echo "$f" | grep "\.php$"`" ]; then
				rm -f $f > /dev/null 2>&1
				cnt=$(expr $cnt + 1)
			fi
		done
	done
	IFS=$oIFS
	echo "deleted wBB3 cache files: $cnt" >> $logFile
fi


if [ ! -z "$backupOwner" ]; then
	echo "$tSpacer" >> $logFile
	echo "Check owner..." >> $logFile
	chown -R $backupOwner $backupDir >> $logFile
fi
if [ ! -z "$backupGroup" ]; then
	echo "$tSpacer" >> $logFile
	echo "Check group..." >> $logFile
	chgrp -R $backupGroup $backupDir >> $logFile
fi
if [ ! -z "$chmodFiles" ]; then
	echo "$tSpacer" >> $logFile
	echo "CHMOD all files to "$chmodFiles >> $logFile
	find $backupDir -type f -print0 | xargs -0 chmod $chmodFiles >> $logFile
fi
if [ ! -z "$chmodDirs" ]; then
	echo "$tSpacer" >> $logFile
	echo "CHMOD all directories to "$chmodDirs >> $logFile
	find $backupDir -type d -print0 | xargs -0 chmod $chmodDirs >> $logFile
fi

eDate=`date +"%d.%m.%Y %H:%M:%S"`
echo "Backup completed:" >> $logFile
echo "Started:  "$sDate >> $logFile
echo "Finished: "$eDate >> $logFile
echo "" >> $logFile

echo "$hSpacer" >> $logFile
echo "wget outputs:" >> $logFile
echo "$tSpacer" >> $logFile
cat $logFile"-wget" >> $logFile

rm -f $logFile"-wget"

exit 0

# WGET SWITCHES ********************************************
# -m	--mirror
#		Turn on options suitable for mirroring.  This option turns on
#		recursion and time-stamping, sets infinite recursion depth and
#		keeps FTP directory listings.  It is currently equivalent to -r -N
#		-l inf --no-remove-listing.

# -nv	--no-verbose
#		Turn off verbose without being completely quiet (use -q for that),
#		which means that error messages and basic information still get printed.

# -nH	--no-host-directories
#		Disable generation of host-prefixed directories.  By default,
#		invoking Wget with -r http://fly.srk.fer.hr/ will create a struc-
#		ture of directories beginning with fly.srk.fer.hr/.  This option disables such behavior.

# -X	--exclude-directories=list
#		Specify a comma-separated list of directories you wish to exclude
#		from download (@pxref{Directory-Based Limits} for more details.)
#		Elements of list may contain wildcards.

# -P	--directory-prefix=prefix
#		Set directory prefix to prefix.  The directory prefix is the direc-
#		tory where all other files and subdirectories will be saved to,
#		i.e. the top of the retrieval tree.  The default is . (the current directory).

